# https://circleci.com/docs/2.0/language-elixir/
version: 2
jobs:
  format:
    docker:
      - image: circleci/elixir:1.6
    working_directory: ~/repo
    steps:
      - checkout
      - run:
          name: Ensure code is formatted
          command: mix format --check-formatted --dry-run
  test:
    docker:
      - image: circleci/elixir:1.6
        environment:
          MIX_ENV: test
      - image: postgres
    working_directory: ~/repo
    steps:
      - checkout
      - run:
          name: Fetch dependencies and test
          command: mix do local.hex --force, local.rebar --force, deps.get, ecto.create, test
  build:
    docker:
      - image: circleci/elixir:1.6
        environment:
          MIX_ENV: prod
    working_directory: ~/repo
    steps:
      - checkout
      - setup_remote_docker:
          version: 17.05.0-ce
      - run:
          name: Build Docker image
          command: |
            TAG=latest
            docker build -t elixir-devops/lightsail:$TAG .
            mkdir -p /tmp/docker-cache
            docker save -o /tmp/docker-cache/built-image.tar elixir-devops/lightsail:$TAG
      - save_cache:
          key: v1-elixir_devops_lightsail-docker-cache-{{ .Revision }}
          paths:
            - /tmp/docker-cache
  deploy:
    docker:
      - image: circleci/elixir:1.6
        environment:
          MIX_ENV: prod
    working_directory: ~/repo
    steps:
      - checkout
      - restore_cache:
          key: v1-elixir_devops_lightsail-docker-cache-{{ .Revision }}
      - setup_remote_docker:
          version: 17.05.0-ce
      - run:
          name: Tag and push Docker image
          command: |
            docker load < /tmp/docker-cache/built-image.tar
            TAG=latest
            TARGET_IMAGE=049988697321.dkr.ecr.us-east-1.amazonaws.com/elixir-devops/aws_lightsail:TAG
            aws ecr get-login
            docker tag elixir-devops/lightsail:$TAG $TARGET_IMAGE
            docker push $TARGET_IMAGE
workflows:
  version: 2
  aws_lightsail:
    jobs:
      - format
      - test
      - build
      - deploy:
          requires:
            - format
            - test
            - build
          filters:
            branches:
              only: master
